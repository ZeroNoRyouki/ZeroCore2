plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
}

file('build.properties').withReader {

    def properties = new Properties()
	
    properties.load(it)
    project.ext.config = new ConfigSlurper().parse properties
}

version = "${config.minecraft_version}-${config.mod_version_major}.${config.mod_version_minor}.${config.mod_version_patch}"
group = 'it.zerono.mods.zerocore'
archivesBaseName = 'ZeroCore2'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {

    mappings channel: 'official', version: config.minecraft_mappings

	def runDir = file("${rootProject.projectDir}/runs/run-${config.minecraft_version}")

    if (!runDir.exists()) {
        runDir = file("run-${config.minecraft_version}")
    }

    def dataArgs = [
            '--mod', 'zerocore',
            '--all',
            '--existing', project.file('src/main/resources/').absolutePath,
            '--existing', project.file('src/generated/resources/').absolutePath,
            '--output', project.file('src/generated/resources/').absolutePath
    ]

    runs {
        client {

            properties 'mixin.env.remapRefMap': 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"

            workingDirectory runDir

            ideaModule "${rootProject.name}.${project.name}.main".replace(' ', '_')

            mods {
                zerocore {
                    source sourceSets.main
                }

                zerotest {
                    source sourceSets.test
                }
            }
        }

        server {

            properties 'mixin.env.remapRefMap': 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
            
			workingDirectory runDir

            ideaModule "${rootProject.name}.${project.name}.main".replace(' ', '_')

            mods {
                zerocore {
                    source sourceSets.main
                }

                zerotest {
                    source sourceSets.test
                }
            }
        }

        data {

            properties 'mixin.env.remapRefMap': 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"

            workingDirectory runDir
            args dataArgs

            ideaModule "${rootProject.name}.${project.name}.main".replace(' ', '_')

            mods {
                zerocore {
                    source sourceSets.main
                }
            }
        }

        datatest {

            parent runs.data

            ideaModule "${rootProject.name}.${project.name}.test".replace(' ', '_')

            mods {
                zerocore {
                    source sourceSets.main
                }

                zerotest {
                    source sourceSets.test
                }
            }

            afterEvaluate {

                args.removeAll {
                    dataArgs.contains(it instanceof File ? (it as File).absolutePath : it.toString())
                }

                args '--mod', 'zerotest',
                        '--all',
                        '--existing', file('src/test/resources/'),
                        '--existing', file('src/generated-test/resources/'),
                        '--output', file('src/generated-test/resources/')
            }
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

sourceSets.test.resources {
    srcDir 'src/generated-test/resources'
}

processResources {

	inputs.property "mod_version", version
	inputs.property "mod_name", config.mod_name
    inputs.property "minecraft_versionrange", config.minecraft_versionrange
	inputs.property "forge_versionrange", config.forge_versionrange
    inputs.property "loader_versionrange", config.loader_versionrange

    from(sourceSets.main.resources.srcDirs) {
	
        include 'ZeroCore2-1.19/src/main/resources/META-INF/mods.toml'
        expand 'mod_version': version, 
				'mod_name': config.mod_name,
				'minecraft_versionrange': config.minecraft_versionrange,
				'forge_versionrange': config.forge_versionrange,
                'loader_versionrange': config.loader_versionrange
    }
}

repositories {

    // jei
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }

    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }

    // cc-tweaked
    maven {
        url 'https://squiddev.cc/maven/'
    }

    // patchouli
    maven {
        url 'https://maven.blamejared.com'
    }
}

dependencies {
	minecraft "net.minecraftforge:forge:${config.minecraft_version}-${config.forge_version}"

	// cc-tweaked
    compileOnly("cc.tweaked:cc-tweaked-${config.minecraft_version}-core-api:${config.cctweaked_version}")
    compileOnly(fg.deobf("cc.tweaked:cc-tweaked-${config.minecraft_version}-forge-api:${config.cctweaked_version}"))
    runtimeOnly(fg.deobf("cc.tweaked:cc-tweaked-${config.minecraft_version}-forge:${config.cctweaked_version}"))

    // patchouli
    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${config.patchouli_version}")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${config.patchouli_version}")

    // JEI
    compileOnly(fg.deobf("mezz.jei:jei-${config.minecraft_version}-common-api:${config.jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${config.minecraft_version}-forge-api:${config.jei_version}"))
    runtimeOnly(fg.deobf("mezz.jei:jei-${config.minecraft_version}-forge:${config.jei_version}"))
}

jar {

	finalizedBy 'reobfJar'

    manifest {
        attributes 'Specification-Title': config.mod_name
        attributes 'Specification-Vendor': 'ZeroNoRyouki'
        attributes 'Specification-Version': "2"
        attributes 'Implementation-Title': config.mod_name
        attributes 'Implementation-Vendor': 'ZeroNoRyouki'
        attributes 'Implementation-Version': version
        attributes 'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    }	
}

publish.dependsOn('reobfJar')

publishing {

    publications {
        mavenJava(MavenPublication) {
            artifactId = archivesBaseName
            artifact jar
        }
    }
	
	repositories {
        maven {
            url "file:///${rootProject.projectDir}/../Maven"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
