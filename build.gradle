import java.nio.file.Files
import java.nio.file.Paths

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'
apply from: 'https://raw.githubusercontent.com/SizableShrimp/Forge-Class-Remapper/main/classremapper.gradle'

file('build.properties').withReader {

    def properties = new Properties()
	
    properties.load(it)
    project.ext.config = new ConfigSlurper().parse properties
}

version = "${config.minecraft_version}-${config.mod_version_major}.${config.mod_version_minor}.${config.mod_version_patch}"
group = 'it.zerono.mods.zerocore'
archivesBaseName = 'ZeroCore2'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {

    mappings channel: 'official', version: config.minecraft_mappings

    def runPath = Paths.get(System.getenv('mc_runs'), "forge")

    if (!Files.exists(runPath)) {
        runPath = Paths.get("${rootProject.projectDir}", "runs")

        if (!Files.exists(runPath)) {
            Files.createDirectories(runPath)
        }
    }

    def clientRunDir = runPath.resolve("client-${config.minecraft_version}").toFile();
    def serverRunDir = runPath.resolve("server-${config.minecraft_version}").toFile();

    if (!clientRunDir.exists()) {
        clientRunDir.mkdirs();
    }

    if (!serverRunDir.exists()) {
        serverRunDir.mkdirs();
    }

    runs {
        client {

            properties 'mixin.env.remapRefMap': 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"

            workingDirectory clientRunDir

            ideaModule "${rootProject.name}.${project.name}.main".replace(' ', '_')
			
            mods {
                zerocore {
                    source sourceSets.main
                }
            }
        }

        server {

            properties 'mixin.env.remapRefMap': 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
            
			workingDirectory serverRunDir

            ideaModule "${rootProject.name}.${project.name}.main".replace(' ', '_')
			
            mods {
                zerocore {
                    source sourceSets.main
                }
            }
        }

        data {

            properties 'mixin.env.remapRefMap': 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"

            workingDirectory clientRunDir

            ideaModule "${rootProject.name}.${project.name}.main".replace(' ', '_')

            args '--mod', 'zerocore', '--all', '--output', file('src/generated/resources/')

            mods {
                zerocore {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

processResources {

	inputs.property "mod_version", version
	inputs.property "mod_name", config.mod_name
    inputs.property "minecraft_versionrange", config.minecraft_versionrange
	inputs.property "forge_versionrange", config.forge_versionrange
    inputs.property "loader_versionrange", config.loader_versionrange

    from(sourceSets.main.resources.srcDirs) {
	
        include 'ZeroCore2-1.18/src/main/resources/META-INF/mods.toml'
        expand 'mod_version': version, 
				'mod_name': config.mod_name,
				'minecraft_versionrange': config.minecraft_versionrange,
				'forge_versionrange': config.forge_versionrange,
                'loader_versionrange': config.loader_versionrange
    }
}

repositories {

    // jei
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }

    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }

    // cc-tweaked
    maven {
        url 'https://squiddev.cc/maven/'
    }

    // patchouli
    maven {
        url 'https://maven.blamejared.com'
    }
}

dependencies {
	minecraft "net.minecraftforge:forge:${config.minecraft_version}-${config.forge_version}"

	// cc-tweaked
    implementation fg.deobf("org.squiddev:cc-tweaked-${config.minecraft_version}:${config.cctweaked_version}")

    // patchouli
    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${config.patchouli_version}")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${config.patchouli_version}")

    // JEI
    compileOnly(fg.deobf("mezz.jei:jei-${config.minecraft_version}-common-api:${config.jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${config.minecraft_version}-forge-api:${config.jei_version}"))
    runtimeOnly(fg.deobf("mezz.jei:jei-${config.minecraft_version}-forge:${config.jei_version}"))
}

jar {
    manifest {
        attributes 'Specification-Title': config.mod_name
        attributes 'Specification-Vendor': 'ZeroNoRyouki'
        attributes 'Specification-Version': "2"
        attributes 'Implementation-Title': config.mod_name
        attributes 'Implementation-Vendor': 'ZeroNoRyouki'
        attributes 'Implementation-Version': version
        attributes 'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    }

    finalizedBy('reobfJar')
}

publish.dependsOn('reobfJar')

publishing {

    publications {
        mavenJava(MavenPublication) {
            artifactId = archivesBaseName
            artifact jar
        }
    }

    repositories {
        maven {
            url 'file://' + System.getenv('mc_maven')
        }
    }
}
