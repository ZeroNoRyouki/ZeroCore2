package it.zerono.mods.zerocore.lib.datagen.provider.client.model;

import com.google.common.base.Preconditions;
import com.google.common.base.Strings;
import com.google.gson.JsonElement;
import it.unimi.dsi.fastutil.objects.Object2ObjectArrayMap;
import it.zerono.mods.zerocore.lib.CodeHelper;
import net.minecraft.data.CachedOutput;
import net.minecraft.data.DataProvider;
import net.minecraft.data.PackOutput;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.level.ItemLike;
import net.minecraft.world.level.block.Block;
import net.neoforged.neoforge.common.util.NonNullFunction;
import org.jetbrains.annotations.ApiStatus;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.function.Supplier;

public class ModelBuilder
        implements NonNullFunction<CachedOutput, CompletableFuture<?>> {

    public static final String BLOCK_PREFIX = "block/";
    public static final String ITEM_PREFIX = "item/";

    public ModelBuilder(PackOutput output) {

        Preconditions.checkNotNull(output);

        this._pathProvider = output.createPathProvider(PackOutput.Target.RESOURCE_PACK, "models");
        this._models = new Object2ObjectArrayMap<>(128);
    }

    /**
     * Create a new {@link ModelFileBuilder} for building a model with the specified ID.
     *
     * @param id The ID for the new model.
     * @return A new {@link ModelFileBuilder} to be used to build the new model.
     */
    public ModelFileBuilder model(ResourceLocation id) {

        checkId(id);

        return this.modelInternal(id, null, null);
    }

    /**
     * Create a new {@link ModelFileBuilder} for building a model with an ID generated by adding the specified suffix
     * to the provided base ID.
     *
     * @param baseId The base ID used for generating the ID for the new model.
     * @param suffix A suffix that will be added to the base ID to generate the ID for the new model.
     * @return A new {@link ModelFileBuilder} to be used to build the new model.
     */
    public ModelFileBuilder model(ResourceLocation baseId, String suffix) {

        checkId(baseId);

        return this.modelInternal(baseId, null, suffix);
    }

    /**
     * Create a new {@link ModelFileBuilder} for building a model for the provided {@link Block}.
     *
     * @param block The {@link Block} to generate a new model for.
     * @return A new {@link ModelFileBuilder} to be used to build the new model.
     */
    public <B extends Block> ModelFileBuilder block(B block) {
        return this.blockInternal(block, null);
    }

    /**
     * Create a new {@link ModelFileBuilder} for building a model with an ID generated by adding the specified suffix
     * to the provided {@link Block} ID.
     *
     * @param block The {@link Block} whose ID will be used as a base for generating the ID for the new model.
     * @param suffix A suffix that will be added to the base ID to generate the ID for the new model.
     * @return A new {@link ModelFileBuilder} to be used to build the new model.
     */
    public <B extends Block> ModelFileBuilder block(B block, String suffix) {

        checkSuffix(suffix);

        return this.blockInternal(block, suffix);
    }

    /**
     * Create a new {@link ModelFileBuilder} for building a model for the provided {@link Block}.
     *
     * @param block The {@link Block} to generate a new model for.
     * @return A new {@link ModelFileBuilder} to be used to build the new model.
     */
    public <B extends Block> ModelFileBuilder block(Supplier<B> block) {

        Preconditions.checkNotNull(block, "Block must not be null");

        return this.blockInternal(block.get(), null);
    }

    /**
     * Create a new {@link ModelFileBuilder} for building a model with an ID generated by adding the specified suffix
     * to the provided {@link Block} ID.
     *
     * @param block The {@link Block} whose ID will be used as a base for generating the ID for the new model.
     * @param suffix A suffix that will be added to the base ID to generate the ID for the new model.
     * @return A new {@link ModelFileBuilder} to be used to build the new model.
     */
    public <B extends Block> ModelFileBuilder block(Supplier<B> block, String suffix) {

        Preconditions.checkNotNull(block, "Block must not be null");
        checkSuffix(suffix);

        return this.blockInternal(block.get(), suffix);
    }

    /**
     * Create a new {@link ModelFileBuilder} for building a model for the provided {@link ItemLike}.
     *
     * @param item The {@link ItemLike} to generate a new model for.
     * @return A new {@link ModelFileBuilder} to be used to build the new model.
     */
    public <I extends ItemLike> ModelFileBuilder item(I item) {
        return this.itemInternal(item, null);
    }

    /**
     * Create a new {@link ModelFileBuilder} for building a model with an ID generated by adding the specified suffix
     * to the provided {@link ItemLike} ID.
     *
     * @param item The {@link ItemLike} whose ID will be used as a base for generating the ID for the new model.
     * @param suffix A suffix that will be added to the base ID to generate the ID for the new model.
     * @return A new {@link ModelFileBuilder} to be used to build the new model.
     */
    public <I extends ItemLike> ModelFileBuilder item(I item, String suffix) {

        checkSuffix(suffix);

        return this.itemInternal(item, null);
    }

    /**
     * Create a new {@link ModelFileBuilder} for building a model for the provided {@link ItemLike}.
     *
     * @param item The {@link ItemLike} to generate a new model for.
     * @return A new {@link ModelFileBuilder} to be used to build the new model.
     */
    public <I extends ItemLike> ModelFileBuilder item(Supplier<I> item) {

        Preconditions.checkNotNull(item, "Item must not be null");

        return this.itemInternal(item.get(), null);
    }

    /**
     * Create a new {@link ModelFileBuilder} for building a model with an ID generated by adding the specified suffix
     * to the provided {@link ItemLike} ID.
     *
     * @param item The {@link ItemLike} whose ID will be used as a base for generating the ID for the new model.
     * @param suffix A suffix that will be added to the base ID to generate the ID for the new model.
     * @return A new {@link ModelFileBuilder} to be used to build the new model.
     */
    public <I extends ItemLike> ModelFileBuilder item(Supplier<I> item, String suffix) {

        Preconditions.checkNotNull(item, "Item must not be null");
        checkSuffix(suffix);

        return this.itemInternal(item.get(), suffix);
    }

    /**
     * Create a texture ID from the provided {@link Block}.
     *
     * @param block The {@link Block}.
     * @return The texture ID.
     */
    public <B extends Block> ResourceLocation defaultBlockTexture(Supplier<B> block) {
        return CodeHelper.getObjectId(block.get()).withPrefix(BLOCK_PREFIX);
    }

    /**
     * Create a texture ID from the provided {@link ItemLike}.
     *
     * @param item The {@link ItemLike}.
     * @return The texture ID.
     */
    public <I extends ItemLike> ResourceLocation defaultItemTexture(Supplier<I> item) {
        return CodeHelper.getObjectId(item.get().asItem()).withPrefix(ITEM_PREFIX);
    }

    //region NonNullFunction<CachedOutput, CompletableFuture<?>>

    @ApiStatus.Internal
    @Override
    public @NotNull CompletableFuture<?> apply(@NotNull CachedOutput output) {
        return CompletableFuture.allOf(this._models.entrySet().stream()
                .map(e -> DataProvider.saveStable(output, e.getValue().get(), this._pathProvider.json(e.getKey())))
                .toArray(CompletableFuture<?>[]::new));
    }

    //endregion
    //region internals

    private void sink(ResourceLocation id, Supplier<JsonElement> jsonSupplier) {

        checkId(id);
        Preconditions.checkNotNull(jsonSupplier);
        Preconditions.checkState(!this._models.containsKey(id), "A model is already defined for ID %s", id);

        this._models.put(id, jsonSupplier);
    }

    private ModelFileBuilder modelInternal(ResourceLocation baseId, @Nullable String prefix, @Nullable String suffix) {

        if (null != prefix) {
            baseId = baseId.withPrefix(prefix);
        }

        if (null != suffix) {
            baseId = baseId.withPath(basePath -> basePath + suffix);
        }

        return new ModelFileBuilder(baseId, this::sink);
    }

    private <B extends Block> ModelFileBuilder blockInternal(B block, @Nullable String suffix) {

        Preconditions.checkNotNull(block, "Block must not be null");

        return this.modelInternal(CodeHelper.getObjectId(block), BLOCK_PREFIX, suffix);
    }

    private <I extends ItemLike> ModelFileBuilder itemInternal(I item, @Nullable String suffix) {

        Preconditions.checkNotNull(item, "Item must not be null");

        return this.modelInternal(CodeHelper.getObjectId(item.asItem()), ITEM_PREFIX, suffix);
    }

    private static void checkId(ResourceLocation id) {
        Preconditions.checkNotNull(id, "The ID must not be null");
    }

    private static void checkSuffix(String suffix) {
        Preconditions.checkArgument(!Strings.isNullOrEmpty(suffix), "The suffix must not be null or empty");
    }

    private final PackOutput.PathProvider _pathProvider;
    private final Map<ResourceLocation, Supplier<JsonElement>> _models;

    //endregion
}
